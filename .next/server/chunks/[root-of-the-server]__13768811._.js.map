{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Documents/codebase/trello-lookalike/web1-assessment/src/libs/db/mongoose.ts"],"sourcesContent":["\"use server\";\r\n\r\nimport { Connection, connect } from \"mongoose\";\r\n\r\nconst MONGO_URI = process.env.MONGO_URI;\r\n\r\nif (!MONGO_URI) {\r\n  throw new Error(\"Please define the MONGODB_URI environment variable inside .env.local\");\r\n}\r\n\r\ninterface MongooseCache {\r\n  conn: Connection | null;\r\n  promise: Promise<Connection> | null;\r\n}\r\n\r\ndeclare global {\r\n  var mongooseCache: MongooseCache;\r\n}\r\n\r\nglobal.mongooseCache = global.mongooseCache || { conn: null, promise: null };\r\n\r\nexport async function connectDB(): Promise<Connection> {\r\n  if (global.mongooseCache.conn) {\r\n    return global.mongooseCache.conn;\r\n  }\r\n\r\n  if (!global.mongooseCache.promise) {\r\n    global.mongooseCache.promise = connect(MONGO_URI!).then();\r\n  }\r\n\r\n  global.mongooseCache.conn = await global.mongooseCache.promise;\r\n  return global.mongooseCache.conn;\r\n}\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;AAEA,MAAM,YAAY,QAAQ,GAAG,CAAC,SAAS;AAEvC,IAAI,CAAC,WAAW;IACd,MAAM,IAAI,MAAM;AAClB;AAWA,OAAO,aAAa,GAAG,OAAO,aAAa,IAAI;IAAE,MAAM;IAAM,SAAS;AAAK;AAEpE,eAAe;IACpB,IAAI,OAAO,aAAa,CAAC,IAAI,EAAE;QAC7B,OAAO,OAAO,aAAa,CAAC,IAAI;IAClC;IAEA,IAAI,CAAC,OAAO,aAAa,CAAC,OAAO,EAAE;QACjC,OAAO,aAAa,CAAC,OAAO,GAAG,CAAA,GAAA,yGAAA,CAAA,UAAO,AAAD,EAAE,WAAY,IAAI;IACzD;IAEA,OAAO,aAAa,CAAC,IAAI,GAAG,MAAM,OAAO,aAAa,CAAC,OAAO;IAC9D,OAAO,OAAO,aAAa,CAAC,IAAI;AAClC;;;IAXsB;;AAAA,iPAAA","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Documents/codebase/trello-lookalike/web1-assessment/src/libs/db/models/BoardModel.ts"],"sourcesContent":["import { model, models, Schema } from \"mongoose\";\r\n\r\nconst BoardSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  user: { type: Schema.Types.ObjectId, ref: 'User' },\r\n}, { timestamps: true });\r\n\r\nexport const BoardModel = models?.Board || model('Board', BoardSchema);\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC7B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,MAAM;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;IAAO;AACnD,GAAG;IAAE,YAAY;AAAK;AAEf,MAAM,aAAa,yGAAA,CAAA,SAAM,EAAE,SAAS,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,SAAS","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Documents/codebase/trello-lookalike/web1-assessment/src/libs/db/models/ListModel.ts"],"sourcesContent":["import { model, models, Schema } from \"mongoose\";\r\n\r\nconst ListSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  board: { type: Schema.Types.ObjectId, ref: 'Board' },\r\n  position: { type: Number, required: true },\r\n}, { timestamps: true });\r\n\r\nexport const ListModel = models?.List || model('List', ListSchema); "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,OAAO;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;IAAQ;IACnD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C,GAAG;IAAE,YAAY;AAAK;AAEf,MAAM,YAAY,yGAAA,CAAA,SAAM,EAAE,QAAQ,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,QAAQ","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Documents/codebase/trello-lookalike/web1-assessment/src/libs/db/models/CardModel.ts"],"sourcesContent":["import { model, models, Schema } from \"mongoose\";\r\n\r\nconst CardSchema = new Schema({\r\n  name: { type: String, required: true },\r\n  description: { type: String },\r\n  list: { type: Schema.Types.ObjectId, ref: 'List' },\r\n  position: { type: Number, required: true },\r\n}, { timestamps: true });\r\n\r\nexport const CardModel = models?.Card || model('Card', CardSchema); "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC5B,MAAM;QAAE,MAAM;QAAQ,UAAU;IAAK;IACrC,aAAa;QAAE,MAAM;IAAO;IAC5B,MAAM;QAAE,MAAM,yGAAA,CAAA,SAAM,CAAC,KAAK,CAAC,QAAQ;QAAE,KAAK;IAAO;IACjD,UAAU;QAAE,MAAM;QAAQ,UAAU;IAAK;AAC3C,GAAG;IAAE,YAAY;AAAK;AAEf,MAAM,YAAY,yGAAA,CAAA,SAAM,EAAE,QAAQ,CAAA,GAAA,yGAAA,CAAA,QAAK,AAAD,EAAE,QAAQ","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Documents/codebase/trello-lookalike/web1-assessment/src/app/api/boards/%5BboardId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { connectDB } from \"@/libs/db/mongoose\";\r\nimport { BoardModel } from \"@/libs/db/models/BoardModel\";\r\nimport { ListModel } from \"@/libs/db/models/ListModel\";\r\nimport { CardModel } from \"@/libs/db/models/CardModel\";\r\n\r\nexport async function GET(req: NextRequest, { params }: { params: { boardId: string } }) {\r\n  await connectDB();\r\n  const board = await BoardModel.findById(params.boardId);\r\n  const lists = await ListModel.find({ board: params.boardId }).sort({ position: 1 });\r\n  const listIds = lists.map(list => list._id);\r\n  const cards = await CardModel.find({ list: { $in: listIds } }).sort({ position: 1 });\r\n  return NextResponse.json({ board, lists, cards });\r\n}\r\n\r\nexport async function PUT(req: NextRequest, { params }: { params: { boardId: string } }) {\r\n  await connectDB();\r\n  const { name } = await req.json();\r\n  const board = await BoardModel.findByIdAndUpdate(params.boardId, { name }, { new: true });\r\n  return NextResponse.json(board);\r\n}\r\n\r\nexport async function DELETE(req: NextRequest, { params }: { params: { boardId: string } }) {\r\n  await connectDB();\r\n  const boardId = params.boardId;\r\n  const lists = await ListModel.find({ board: boardId });\r\n  const listIds = lists.map(list => list._id);\r\n  await CardModel.deleteMany({ list: { $in: listIds } });\r\n  await ListModel.deleteMany({ board: boardId });\r\n  await BoardModel.findByIdAndDelete(boardId);\r\n  return NextResponse.json({ message: \"Board deleted\" });\r\n} "],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;AAEO,eAAe,IAAI,GAAgB,EAAE,EAAE,MAAM,EAAmC;IACrF,MAAM,CAAA,GAAA,+HAAA,CAAA,YAAS,AAAD;IACd,MAAM,QAAQ,MAAM,2IAAA,CAAA,aAAU,CAAC,QAAQ,CAAC,OAAO,OAAO;IACtD,MAAM,QAAQ,MAAM,0IAAA,CAAA,YAAS,CAAC,IAAI,CAAC;QAAE,OAAO,OAAO,OAAO;IAAC,GAAG,IAAI,CAAC;QAAE,UAAU;IAAE;IACjF,MAAM,UAAU,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,GAAG;IAC1C,MAAM,QAAQ,MAAM,0IAAA,CAAA,YAAS,CAAC,IAAI,CAAC;QAAE,MAAM;YAAE,KAAK;QAAQ;IAAE,GAAG,IAAI,CAAC;QAAE,UAAU;IAAE;IAClF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE;QAAO;QAAO;IAAM;AACjD;AAEO,eAAe,IAAI,GAAgB,EAAE,EAAE,MAAM,EAAmC;IACrF,MAAM,CAAA,GAAA,+HAAA,CAAA,YAAS,AAAD;IACd,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,IAAI;IAC/B,MAAM,QAAQ,MAAM,2IAAA,CAAA,aAAU,CAAC,iBAAiB,CAAC,OAAO,OAAO,EAAE;QAAE;IAAK,GAAG;QAAE,KAAK;IAAK;IACvF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B;AAEO,eAAe,OAAO,GAAgB,EAAE,EAAE,MAAM,EAAmC;IACxF,MAAM,CAAA,GAAA,+HAAA,CAAA,YAAS,AAAD;IACd,MAAM,UAAU,OAAO,OAAO;IAC9B,MAAM,QAAQ,MAAM,0IAAA,CAAA,YAAS,CAAC,IAAI,CAAC;QAAE,OAAO;IAAQ;IACpD,MAAM,UAAU,MAAM,GAAG,CAAC,CAAA,OAAQ,KAAK,GAAG;IAC1C,MAAM,0IAAA,CAAA,YAAS,CAAC,UAAU,CAAC;QAAE,MAAM;YAAE,KAAK;QAAQ;IAAE;IACpD,MAAM,0IAAA,CAAA,YAAS,CAAC,UAAU,CAAC;QAAE,OAAO;IAAQ;IAC5C,MAAM,2IAAA,CAAA,aAAU,CAAC,iBAAiB,CAAC;IACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAgB;AACtD","debugId":null}}]
}