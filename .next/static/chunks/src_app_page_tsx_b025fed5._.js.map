{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/USER/Documents/codebase/trello-lookalike/web1-assessment/src/app/page.tsx"],"sourcesContent":["'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { DndContext, closestCorners, DragEndEvent } from '@dnd-kit/core';\r\nimport { SortableContext, horizontalListSortingStrategy, arrayMove } from '@dnd-kit/sortable';\r\nimport { List as ListType, Card as CardType, Board as BoardType } from '@/types';\r\nimport { List } from '@/components/dnd/List';\r\n\r\nexport default function Home() {\r\n  const [board, setBoard] = useState<BoardType | null>(null);\r\n  const [lists, setLists] = useState<ListType[]>([]);\r\n  const [cards, setCards] = useState<CardType[]>([]);\r\n\r\n  useEffect(() => {\r\n    // TODO: Replace with a dynamic way to get the board ID\r\n    const boardId = '66779308182b02234a532382'; // IMPORTANT: Replace with a valid board ID from your DB\r\n    if (boardId) {\r\n      fetch(`/api/boards/${boardId}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n          setBoard(data.board);\r\n          setLists(data.lists);\r\n          setCards(data.cards);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n    if (!over) return;\r\n\r\n    if (active.id !== over.id) {\r\n      // Dragging cards\r\n      if (active.data.current?.type === 'Card') {\r\n        setCards((cards) => {\r\n          const activeIndex = cards.findIndex(c => c._id === active.id);\r\n          const overIndex = cards.findIndex(c => c._id === over.id);\r\n          if (activeIndex === -1 || overIndex === -1) return cards;\r\n          let newCards = arrayMove(cards, activeIndex, overIndex);\r\n\r\n          // Update list if card is moved to a different list\r\n          const overListId = over.data.current?.sortable?.containerId || cards[overIndex].list;\r\n          if (overListId && cards[activeIndex].list !== overListId) {\r\n             newCards = newCards.map((c, index) => index === overIndex ? {...c, list: overListId} : c)\r\n          }\r\n\r\n          // API call to update card position and list\r\n          fetch(`/api/cards/${active.id}`, {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n              position: overIndex,\r\n              list: overListId,\r\n            }),\r\n          });\r\n          \r\n          return newCards;\r\n        });\r\n      }\r\n\r\n      // Dragging lists\r\n      if (active.data.current?.type === 'List') {\r\n        setLists((lists) => {\r\n          const activeIndex = lists.findIndex(l => l._id === active.id);\r\n          const overIndex = lists.findIndex(l => l._id === over.id);\r\n          if (activeIndex === -1 || overIndex === -1) return lists;\r\n          const newLists = arrayMove(lists, activeIndex, overIndex);\r\n\r\n          // API call to update list position\r\n          newLists.forEach((list, index) => {\r\n            fetch(`/api/lists/${list._id}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ position: index }),\r\n            });\r\n          });\r\n\r\n          return newLists;\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!board) {\r\n    return (\r\n        <div className=\"flex justify-center items-center h-screen\">\r\n            <p>Please update the boardId in <code>src/app/page.tsx</code> with an ID from your database.</p>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <DndContext onDragEnd={handleDragEnd} collisionDetection={closestCorners}>\r\n      <div className=\"p-4\">\r\n        <h1 className=\"text-2xl font-bold mb-4\">{board.name}</h1>\r\n        <SortableContext items={lists.map(l => l._id)} strategy={horizontalListSortingStrategy}>\r\n          <div className=\"flex gap-4\">\r\n            {lists.map(list => (\r\n              <List key={list._id} id={list._id} list={list} cards={cards.filter(c => c.list === list._id)} />\r\n            ))}\r\n          </div>\r\n        </SortableContext>\r\n      </div>\r\n    </DndContext>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}